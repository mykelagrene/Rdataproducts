x <- list(a = rnorm(10), b = rnorm (10,1), c = rnorm(10,5))
$a
x$a
x$b
x$c
?rnorm
?elt
installpackages("sqldf")
install.packages("sqldf")
library(sqldf)
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
temp <- tempfile()
download.file(fileUrl, temp, mode = "wb", method = "curl")
#uncompress zip file
con <- unz(temp, "household_power_consumption.txt")
unlink(temp)
library(sqldf)
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE (Date == "2007-02-01" OR Date == "2007-02-02")", header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE Date == "2007-02-01"", header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE Date = "2007-02-01"", header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE Date is "2007-02-01"", header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = "select * FROM file", header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = 'select * FROM file WHERE Date is "2007/02/01"', header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = 'select * from file where Date is "2007/02/01"', header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = 'select * from file where Date == "2007/02/01"', header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = 'select * from file where Date = "2007/02/01"', header = TRUE, sep = ";")
DF <- read.csv2.sql(con, sql = 'select * from file where "Date" == "2007/02/01"', header = TRUE, sep = ";")
DF <- read.csv.sql(con, sql = 'select * from file where Date >= "2007/02/01"', header = TRUE, sep = ";")
con <- unz(temp, "household_power_consumption.txt")
DF <- read.csv.sql(con, sql = 'select * from file where Date >= "2007/02/01"', header = TRUE, sep = ";")
dat <- read.table(con, sep = ";", na.strings = "?")
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
temp <- tempfile()
download.file(fileUrl, temp, mode = "wb", method = "curl")
#uncompress zip file
con <- unz(temp, "household_power_consumption.txt")
#create data table
DT <- read.table(con, sep = ";", na.strings = "?")
unlink(temp)
summary(DT)
DT <- read.table(con, header = TRUE, sep = ";", na.strings = "?")
temp <- tempfile()
download.file(fileUrl, temp, mode = "wb", method = "curl")
#uncompress zip file
con <- unz(temp, "household_power_consumption.txt")
#create data table
DT <- read.table(con, header = TRUE, sep = ";", na.strings = "?")
unlink(temp)
summary(DT)
head(DT)
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE (Date == "01/02/2007" OR Date == "02/02/2007")", header = TRUE, sep = ";")
DT1 <- subset(DT, Date == "01/02/2007")
DT1 <- subset(DT, Date == "1/2/2007")
DF <- read.csv2.sql(con, sql = "select * FROM file WHERE (Date == "1/2/2007" OR Date == "2/2/2007")", header = TRUE, sep = ";")
DT2 <- subset(DT, Date == "1/2/2007" or "2/2/2007")
DT2 <- subset(DT, Date == "2/2/2007")
head(DT1)
head(DT2)
DT3 <- merge(DT1,DT2)
DT3 <- rbind(DT1, DT2)
head(DT3)
DT3$Date <- as.Date(DT3$Date, "%d/%m/%y")
head(DT3)
DT1 <- subset(DT, Date == "1/2/2007")
DT3 <- rbind(DT1, DT2)
DT3$Date <- as.Date(DT3$Date, "%d/%m/%y")
head(DT3)
DT3 <- rbind(DT1, DT2)
head(DT3)
DT3$Date <- as.Date(DT3$Date, "%d/%m/%Y")
head(DT3)
DT3$Date <- as.Date(DT3$Date, "%d/%m/%Y")
DT3$Time <- strptime(DT3$Time, "%H:%M:%S")
head(DT3)
DT1 <- subset(DT, Date == "1/2/2007")
DT2 <- subset(DT, Date == "2/2/2007")
DT3 <- rbind(DT1, DT2)
DT3$Date <- as.Date(DT3$Date, "%d/%m/%Y")
time1 <- strptime(DT3$Date, "%T")
time1
time1 <- strptime(DT3$Time, "%T")
time1
head(time1)
head(DT3)
test <- DT3$Date + DT#$Time
DT1 <- subset(DT, Date == "1/2/2007")
DT2 <- subset(DT, Date == "2/2/2007")
DT3 <- rbind(DT1, DT2)
test <- DT3$Date + DT#$Time
test <- DT3$Date + DT3$Time
test <- DT3[1,] + DT3[2,]
test
test <- DT3[,1] + DT3[,2]
DT3$Date <- as.Date(DT3$Date, "%d/%m/%Y")
head(DT3)
hist(DT3$Global_active_power, col = "red")
hist(DT3$Global_active_power, breaks = 10, col = "red")
hist(DT3$Global_active_power, breaks = 16, col = "red")
title("Global Active Power")
hist(DT3$Global_active_power, breaks = 16, col = "red", main = "Global Active Power", xlab = "Global Active Power(kilowatts)")
DT3 <- rbind(DT1, DT2)
with(DT3, plot(Global_active_power, Date, typ = n))
with(DT3, plot(Global_active_power, Date, typ = 'n'))
with(DT3, plot(Date, Global_active_power, typ = 'n'))
with(DT3, plot(Date, Global_active_power, typ = 'n'))
DT3$Date <- weekdays(as.Date(DT3$Date, "%d/%m/%Y"))
with(DT3, plot(Date, Global_active_power, typ = 'n'))
head(DT3)
with(DT3, plot(Date, Global_active_power))
DT3 <- rbind(DT1, DT2)
head(DT3)
within(DT3, { timestamp=format(as.POSIXct(paste(Date, Time)), "%d/%m/%Y %H:%M:%S") })
head(DT3)
DT4 <- DT3[, timestamp: = strptime(paste(DT3$Date, DT3$Time), "%d/%m/%Y %H:%M:%S")
DT4 <- DT3[, timestamp:= strptime(paste(DT3$Date, DT3$Time), "%d/%m/%Y %H:%M:%S")
]
DT4 <- DT3[, timestamp: = {strptime(paste(DT3$Date, DT3$Time), "%d/%m/%Y %H:%M:%S")}]
library(data.table)
install.packages("data.table")
DT5 = subset(DT, Date == "1/2/2007" || Date == "2/2/2007")
DT5 = subset(DT, (Date == "1/2/2007" || Date == "2/2/2007"))
DT5 = subset(DT, (Date == "1/2/2007" or Date == "2/2/2007"))
install.packages("data.table")
library(xlsx)
install.packages(data.table)
install.packages("data.table")
install.packages("xlsx")
install.packages("XML")
library(XML)
library(XML)
xmlTreeParse()
?xmlTreeParse()
library(plyr)
library(quantmod)
amzn = getSymbols("AMZN", auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
years <- as.numeric(format(sampleTimes, "%Y"))
table(years)
twotwelve <- sampleTimes[as.numeric(format(sampleTimes, "%Y")) == 2012]
twotwelve
table(weekdays(twotwelve))
data(mtcars)
df <- mtcars
df$am <- gsub('0', 'automatic', df$am)
df$am <- gsub('1', 'manual', df$am)
library(lattice)
xyplot(mpg ~ disp|am, data = df, type = c("p","r"))
df2 <- split(df, df$am)
auto_df <- as.data.frame(df2[1])
man_df <- as.data.frame(df2[2])
xyplot(mpg ~ disp|am * hp, data = df, type = c("p","r"))
xyplot(mpg ~ disp|am, data = df, type = c("p","r"))
xyplot(mpg ~ hp|am, data = df, type = c("p","r"))
xyplot(mpg ~ disp|am, data = df, type = c("p","r"))
with(auto_df, cor(mpg, disp))
with(man_df, cor(mpg, disp))
with(auto_df, cor(mpg, hp))
with(man_df, cor(mpg, hp))
auto_df
with(auto_df, cor(automatic.mpg, automatic.disp))
with(man_df, cor(manual.mpg, manual.disp))
with(auto_df, cor(automatic.mpg, automatic.disp))
with(man_df, cor(manual.mpg, manual.disp))
with(auto_df, cor(automatic.mpg, automatic.hp))
with(man_df, cor(manual.mpg, manual.hp))
with(auto_df, coef(lm(automatic.mpg~automatic.disp))
with(man_df, coef(lm(manual.mpg~manual.disp))
with(auto_df, coef(automatic.mpg~automatic.hp))
with(man_df, coef(manual.mpg~manual.hp))
with(auto_df, coef(lm(automatic.mpg~automatic.disp)))
with(man_df, coef(lm(manual.mpg~manual.disp)))
with(auto_df, coef(lm(automatic.mpg~automatic.hp)))
with(man_df, coef(manual.mpg~manual.hp)))
with(man_df, coef(lm(manual.mpg~manual.hp)))
mean(auto_df$automatic.mpg)
mean(man_df$man.mpg)
mean(manual_df$manual.mpg)
mean(man_df$manual.mpg)
with(auto_df, coef(lm(automatic.mpg~automatic.disp)))
with(man_df, coef(lm(manual.mpg~manual.disp)))
with(auto_df, coef(lm(automatic.mpg~automatic.hp)))
with(man_df, coef(lm(manual.mpg~manual.hp)))
.059- .028
32.866 - 25.157
7.709 / .031
library(ggplot2)
library(gridExtra)
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
plot2 <- ggplot(dat, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
grid.arrange(plot1, plot2, ncol=1)
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
grid.arrange(plot1, plot2, ncol=1)
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
+ ggtitle("MPG vs. Displament and Horsepower\Automatic and Manual Transmissions")
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
grid.arrange(plot1, plot2, ncol=1)
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
+ ggtitle("MPG vs. Displament and Horsepower\nAutomatic and Manual Transmissions")
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
grid.arrange(plot1, plot2, ncol=1)
auto_df <- df2[(df2$am = "automatic"),]
man_df <- df2[(df2$am = "manual"),]
auto_df <- df2[(df2$am == "automatic"),]
man_df <- df2[(df2$am == "manual"),]
df2$am
auto_df <- df[(df2$am == "automatic"),]
man_df <- df[(df2$am == "manual"),]
df <- mtcars
df$am <- gsub('0', 'automatic', df$am)
df$am <- gsub('1', 'manual', df$am)
auto_df <- df[(df$am == "automatic"),]
man_df <- df[(df$am == "manual"),]
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm, fullrange=TRUE) + # Add linear regression lines
ggtitle("MPG vs. Displament and Horsepower\nAutomatic and Manual Transmissions")
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm,   # Add linear regression lines
fullrange=TRUE) # Extend regression lines
grid.arrange(plot1, plot2, ncol=1)
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm, fullrange=TRUE) # Add linear regression lines
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm, fullrange=TRUE) # Add linear regression lines
grid.arrange(plot1, plot2, ncol=2, main = "MPG vs. Displacement and Horsepower\n
Automatic and Manual Transmissions")
grid.arrange(plot1, plot2, ncol=1, main = "MPG vs. Displacement and Horsepower\n
Automatic and Manual Transmissions")
grid.arrange(plot1, plot2, ncol=1,
main = "MPG vs. Displacement/Horsepower\nAutomatic vs. Manual Transmissions")
plot1 <- ggplot(df, aes(x=disp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm, fullrange=TRUE) + # Add linear regression lines
theme(legend.title=element_blank())
plot2 <- ggplot(df, aes(x=hp, y=mpg, color=am)) + geom_point(shape=1) +
scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method=lm, fullrange=TRUE)  + # Add linear regression lines
theme(legend.title=element_blank())
grid.arrange(plot1, plot2, ncol=1,
main = "MPG vs. Displacement/Horsepower\nAutomatic vs. Manual Transmissions")
with(auto_df, coef(lm(mpg~disp)))
with(man_df, coef(lm(mpg~disp)))
with(auto_df, coef(lm(mpg~hp)))
with(man_df, coef(lm(mpg~hp)))
library(MASS)
?shuttle
head(shuttle)
glm(formula = shuttle$use ~ shuttle$wind, family = "binomial")
logreg <- glm(formula = shuttle$use ~ shuttle$wind, family = "binomial")
exp(logreg$coeff)
1/.969
head(shuttle)
shuttle[1:20,]
table(shuttle$use)
exp(logreg$coeff)
1/0.968688
table(shuttle$wind, shuttle$use)
nm <- 72/(72 + 56)
72/73
1/.969
table(shuttle$use, shuttle$wind)
((72/128)/(56/128))/((73/128/55/128))
72/128
56/128
72/56
73/55
(72/56)/(73/55)
72/56/73/55
head(shuttle)
logreg2 <- glm(formula = shuttle$use ~ shuttle$wind + shuttle$magn, family = "binomial")
exp(logreg2$coeff)
exp(logreg$coeff)
logreg$coeff
glm(formula = 1 - shuttle$use ~ shuttle$wind, family = "binomial")
shuttle$auto <- as.numeric(shuttle$use=="auto")
fit <- glm(auto ~ wind,  binomial,  shuttle)
fit3 <- glm(1-auto ~ wind,  binomial, shuttle)
fit$coefficients
fit3$coefficients
exp(fit$coeff)
exp(fit3$coeff)
head(shuttle)
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
fit2$coeff
exp(windtail)/exp(windhead)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
windhead <- fit2$coef[1]
windtail <- fit2$coef[2]
exp(windtail)/exp(windhead)
exp(windhead)/exp(windtail)
head(InsectSprays)
glm(count ~ spray, poisson, InsectSprays)
glm1 <- glm(count ~ spray, poisson, InsectSprays)
exp(glm1$coeff)
1.0574713/14.5
1.0574713 * 14.5
14.5/15.3333
exp(-0.05588)
1/1.0574713
glm2 <- glm(count ~ spray - 1, poisson, InsectSprays)
exp(glm2$coeff)
logreg <- glm(use ~ wind, binomial, shuttle)
logreg1 <- glm(use ~ wind - 1, binomial, shuttle)
exp(logreg$coeff)
exp(logreg1$coeff)
.77778/.7534247
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
xMat <- cbind(1, x, splineTerms)
yhat <-predict(lm(y~xMat - 1))
lines(x,yhat, col = "red")
lm(y~xMat - 1)
2.0372 - 1.0242
t <- log(10)
t2 <- log(10) + t
glm(count ~ spray + offset(t), poisson, InsectSprays)$coeff
length(InsectSprays$count)
t <- rep(log(1), length(InsectSprays$count)
t2 <- log(10) + t
glm(count ~ spray + offset(t), poisson, InsectSprays)$coeff
t <- rep(log(1), length(InsectSprays$count))
t2 <- log(10) + t
glm(count ~ spray + offset(t), poisson, InsectSprays)$coeff
glm(count ~ spray + offset(t2), poisson, InsectSprays)$coeff
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData2 = data.frame(diagnosis, predictors)
trainIndex2 = createDataPartition(diagnosis, p=0.50)
trainIndex2
training2 = adData[trainIndex2,]
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
names(training)
summary(training)
featurePlot(x=training[, c("Cement", "Water", "Superplasticizer", "Age")], y = training$CompressiveStrength, plot="pairs")
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
setwd("~/data_prod/project")
install.packages("devtools")
install.packages("xml2")
install.packages("libxml-2.0")
install.packages("libxml2-dev")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("shiny")
runApp()
library(shiny)
runApp()
install.packages("UsingR")
runApp()
fit1 <- lm(mpg~hp + wt, data = mtcars)
predict(fit1, data.frame(hp = 200, wt = 3,
interval = "prediction")
)
pmpg <- predict(fit1, data.frame(hp = 200, wt =3, interval = "prediction"))
as.numeric(pmpg)
plot(fit1)
runApp
runApp()
runApp()
mtcars
runApp()
shinyapps::setAccountInfo(name='mykelagrene', token='1B3850D367346BD565C0CFAB10D307AE', secret='p1jXuqHIXfJEg/E1+zv6xvvYov3QqbJzQPKYFHoH')
deployApp()
library(shinyapps)
deployApp()
runApp()
runApp()
runApp()
runApp()
runApp()
